ARM GAS  /tmp/ccJke32V.s 			page 1


   1              	# 1 "./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s"
   1              	/*
   0              	
   2              	    ChibiOS/NIL - Copyright (C) 2012,2013 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS/NIL.
   5              	
   6              	    ChibiOS/NIL is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS/NIL is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    nilcoreasm_v6m.s
  22              	 * @brief   ARMv6-M architecture port low level code.
  23              	 *
  24              	 * @addtogroup ARMCMx_CORE
  25              	 * @{
  26              	 */
  27              	
  28              	#define _FROM_ASM_
  29              	#include "nilconf.h"
   1              	/*
  30              	#include "nilcore.h"
   1              	/*
   2              	    ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3              	                 2011,2012,2013 Giovanni Di Sirio.
   4              	
   5              	    This file is part of ChibiOS/RT.
   6              	
   7              	    ChibiOS/RT is free software; you can redistribute it and/or modify
   8              	    it under the terms of the GNU General Public License as published by
   9              	    the Free Software Foundation; either version 3 of the License, or
  10              	    (at your option) any later version.
  11              	
  12              	    ChibiOS/RT is distributed in the hope that it will be useful,
  13              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  14              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15              	    GNU General Public License for more details.
  16              	
  17              	    You should have received a copy of the GNU General Public License
  18              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19              	*/
  20              	
  21              	/**
  22              	 * @file    ARMCMx/nilcore.h
  23              	 * @brief   ARM Cortex-Mx port macros and structures.
  24              	 *
ARM GAS  /tmp/ccJke32V.s 			page 2


  25              	 * @addtogroup ARMCMx_CORE
  26              	 * @{
  27              	 */
  28              	
  29              	#ifndef _NILCORE_H_
  30              	#define _NILCORE_H_
  31              	
  32              	/*===========================================================================*/
  33              	/* Module constants.                                                         */
  34              	/*===========================================================================*/
  35              	
  36              	/**
  37              	 * @name    Architecture and Compiler
  38              	 * @{
  39              	 */
  40              	/**
  41              	 * @brief   Macro defining a generic ARM architecture.
  42              	 */
  43              	#define PORT_ARCHITECTURE_ARM
  44              	
  45              	/**
  46              	 * @brief   Compiler name and version.
  47              	 */
  48              	#if defined(__GNUC__) || defined(__DOXYGEN__)
  49              	#define PORT_COMPILER_NAME              "GCC " __VERSION__
  50              	
  51              	#elif defined(__ICCARM__)
  52              	#define PORT_COMPILER_NAME              "IAR"
  53              	
  54              	#elif defined(__CC_ARM)
  55              	#define PORT_COMPILER_NAME              "RVCT"
  56              	
  57              	#else
  58              	#error "unsupported compiler"
  59              	#endif
  60              	/** @} */
  61              	
  62              	/**
  63              	 * @name    Cortex-M variants
  64              	 * @{
  65              	 */
  66              	#define CORTEX_M0                       0   /**< @brief Cortex-M0 variant.  */
  67              	#define CORTEX_M0PLUS                   1   /**< @brief Cortex-M0+ variant. */
  68              	#define CORTEX_M1                       2   /**< @brief Cortex-M1 variant.  */
  69              	#define CORTEX_M3                       3   /**< @brief Cortex-M3 variant.  */
  70              	#define CORTEX_M4                       4   /**< @brief Cortex-M4 variant.  */
  71              	/** @} */
  72              	
  73              	/* Inclusion of the Cortex-Mx implementation specific parameters.*/
  74              	#include "cmparams.h"
   1              	/*
  75              	
  76              	/*===========================================================================*/
  77              	/* Module pre-compile time settings.                                         */
  78              	/*===========================================================================*/
  79              	
  80              	/*===========================================================================*/
ARM GAS  /tmp/ccJke32V.s 			page 3


  81              	/* Derived constants and error checks.                                       */
  82              	/*===========================================================================*/
  83              	
  84              	/* The following code is not processed when the file is included from an
  85              	   asm module.*/
  86              	#if !defined(_FROM_ASM_)
  87              	
  88              	/*
  89              	 * Inclusion of the appropriate CMSIS header for the selected device.
  90              	 */
  91              	#if CORTEX_MODEL == CORTEX_M0
  92              	#include "core_cm0.h"
  93              	#elif CORTEX_MODEL == CORTEX_M0PLUS
  94              	#include "core_cm0plus.h"
  95              	#elif CORTEX_MODEL == CORTEX_M3
  96              	#include "core_cm3.h"
  97              	#elif CORTEX_MODEL == CORTEX_M4
  98              	#include "core_cm4.h"
  99              	#else
 100              	#error "unknown or unsupported Cortex-M model"
 101              	#endif
 102              	
 103              	#endif /* !defined(_FROM_ASM_) */
 104              	
 105              	/*===========================================================================*/
 106              	/* Module data structures and types.                                         */
 107              	/*===========================================================================*/
 108              	
 109              	/* The following code is not processed when the file is included from an
 110              	   asm module.*/
 111              	#if !defined(_FROM_ASM_)
 112              	
 113              	/**
 114              	 * @brief   Type of system time.
 115              	 */
 116              	#if (NIL_CFG_ST_RESOLUTION == 32) || defined(__DOXYGEN__)
 117              	typedef uint32_t systime_t;
 118              	#else
 119              	typedef uint16_t systime_t;
 120              	#endif
 121              	
 122              	/**
 123              	 * @brief   Type of a generic ARM register.
 124              	 */
 125              	typedef void *regarm_t;
 126              	
 127              	/**
 128              	 * @brief   Type of stack and memory alignment enforcement.
 129              	 * @note    In this architecture the stack alignment is enforced to 64 bits,
 130              	 *          32 bits alignment is supported by hardware but deprecated by ARM,
 131              	 *          the implementation choice is to not offer the option.
 132              	 */
 133              	typedef uint64_t stkalign_t;
 134              	
 135              	/* The following declarations are there just for Doxygen documentation, the
 136              	   real declarations are inside the sub-headers being specific for the
 137              	   sub-architectures.*/
ARM GAS  /tmp/ccJke32V.s 			page 4


 138              	#if defined(__DOXYGEN__)
 139              	/**
 140              	 * @brief   Interrupt saved context.
 141              	 * @details This structure represents the stack frame saved during a
 142              	 *          preemption-capable interrupt handler.
 143              	 * @note    It is implemented to match the Cortex-Mx exception context.
 144              	 */
 145              	struct port_extctx {};
 146              	
 147              	/**
 148              	 * @brief   System saved context.
 149              	 * @details This structure represents the inner stack frame during a context
 150              	 *          switching.
 151              	 */
 152              	struct port_intctx {};
 153              	#endif /* defined(__DOXYGEN__) */
 154              	
 155              	#endif /* !defined(_FROM_ASM_) */
 156              	
 157              	/*===========================================================================*/
 158              	/* Module macros.                                                            */
 159              	/*===========================================================================*/
 160              	
 161              	/**
 162              	 * @brief   Total priority levels.
 163              	 */
 164              	#define CORTEX_PRIORITY_LEVELS          (1 << CORTEX_PRIORITY_BITS)
 165              	
 166              	/**
 167              	 * @brief   Minimum priority level.
 168              	 * @details This minimum priority level is calculated from the number of
 169              	 *          priority bits supported by the specific Cortex-Mx implementation.
 170              	 */
 171              	#define CORTEX_MINIMUM_PRIORITY         (CORTEX_PRIORITY_LEVELS - 1)
 172              	
 173              	/**
 174              	 * @brief   Maximum priority level.
 175              	 * @details The maximum allowed priority level is always zero.
 176              	 */
 177              	#define CORTEX_MAXIMUM_PRIORITY         0
 178              	
 179              	/**
 180              	 * @brief   Priority level verification macro.
 181              	 */
 182              	#define CORTEX_IS_VALID_PRIORITY(n)                                         \
 183              	  (((n) >= 0) && ((n) < CORTEX_PRIORITY_LEVELS))
 184              	
 185              	/**
 186              	 * @brief   Priority level verification macro.
 187              	 */
 188              	#define CORTEX_IS_VALID_KERNEL_PRIORITY(n)                                  \
 189              	  (((n) >= CORTEX_MAX_KERNEL_PRIORITY) && ((n) < CORTEX_PRIORITY_LEVELS))
 190              	
 191              	/**
 192              	 * @brief   Priority level to priority mask conversion macro.
 193              	 */
 194              	#define CORTEX_PRIO_MASK(n)                                                 \
ARM GAS  /tmp/ccJke32V.s 			page 5


 195              	  ((n) << (8 - CORTEX_PRIORITY_BITS))
 196              	
 197              	/*===========================================================================*/
 198              	/* External declarations.                                                    */
 199              	/*===========================================================================*/
 200              	
 201              	/*===========================================================================*/
 202              	/* Module inline functions.                                                  */
 203              	/*===========================================================================*/
 204              	
 205              	/* Includes the sub-architecture-specific part.*/
 206              	#if (CORTEX_MODEL == CORTEX_M0) || (CORTEX_MODEL == CORTEX_M0PLUS) ||       \
 207              	    (CORTEX_MODEL == CORTEX_M1)
 208              	#include "nilcore_v6m.h"
   1              	/*
 209              	#elif (CORTEX_MODEL == CORTEX_M3) || (CORTEX_MODEL == CORTEX_M4)
  31              	
  32              	#if !defined(FALSE) || defined(__DOXYGEN__)
  33              	#define FALSE   0
  34              	#endif
  35              	
  36              	#if !defined(TRUE) || defined(__DOXYGEN__)
  37              	#define TRUE    1
  38              	#endif
  39              	
  40              	#if !defined(__DOXYGEN__)
  41              	
  42              	                .set    CONTEXT_OFFSET, 0
  43              	                .set    SCB_ICSR, 0xE000ED04
  44              	                .set    ICSR_PENDSVSET, 0x10000000
  45              	                .set    ICSR_NMIPENDSET, 0x80000000
  46              	
  47              	                .cpu    cortex-m0
  48              	                .fpu    softvfp
  49              	
  50              	                .thumb
  51              	                .text
  52              	
  53              	/*--------------------------------------------------------------------------*
  54              	 * Performs a context switch between two threads.
  55              	 *--------------------------------------------------------------------------*/
  56              	                .thumb_func
  57              	                .globl  _port_switch
  58              	_port_switch:
  59 0000 F0B5     	                push    {r4, r5, r6, r7, lr}
  60 0002 4446     	                mov     r4, r8
  61 0004 4D46     	                mov     r5, r9
  62 0006 5646     	                mov     r6, r10
  63 0008 5F46     	                mov     r7, r11
  64 000a F0B4     	                push    {r4, r5, r6, r7}
  65 000c 6B46     	                mov r3, sp
  66 000e 0B60     	                str r3, [r1, #CONTEXT_OFFSET]
  67 0010 0368     	                ldr r3, [r0, #CONTEXT_OFFSET]
  68 0012 9D46     	                mov sp, r3
  69 0014 F0BC     	                pop     {r4, r5, r6, r7}
  70 0016 A046     	                mov     r8, r4
  71 0018 A946     	                mov     r9, r5
ARM GAS  /tmp/ccJke32V.s 			page 6


  72 001a B246     	                mov     r10, r6
  73 001c BB46     	                mov     r11, r7
  74 001e F0BD     	                pop     {r4, r5, r6, r7, pc}
  75              	
  76              	/*--------------------------------------------------------------------------*
  77              	 * Start a thread by invoking its work function.
  78              	 *
  79              	 * Threads execution starts here, the code leaves the system critical zone
  80              	 * and then jumps into the thread function passed in register R4. The
  81              	 * register R5 contains the thread parameter. The function chThdExit() is
  82              	 * called on thread function return.
  83              	 *--------------------------------------------------------------------------*/
  84              	                .thumb_func
  85              	                .globl  _port_thread_start
  86              	_port_thread_start:
  87 0020 62B6     	                cpsie   i
  88 0022 281C     	                mov     r0, r5
  89 0024 A047     	                blx     r4
  90 0026 0023     	                mov     r3, #0
  91 0028 FFF7FEFF 	                bl      chSysHalt
  92              	
  93              	/*--------------------------------------------------------------------------*
  94              	 * Post-IRQ switch code.
  95              	 *
  96              	 * Exception handlers return here for context switching.
  97              	 *--------------------------------------------------------------------------*/
  98              	                .thumb_func
  99              	                .globl  _port_switch_from_isr
 100              	_port_switch_from_isr:
 101 002c FFF7FEFF 	                bl      chSchRescheduleS
 102              	                .globl  _port_exit_from_isr
 103              	_port_exit_from_isr:
 104 0030 014A     	                ldr     r2, .L2
 105 0032 024B     	                ldr     r3, .L3
 106 0034 1360     	                str     r3, [r2, #0]
 107              	#if CORTEX_ALTERNATE_SWITCH
 108              	                cpsie   i
 109              	#endif
 110 0036 FEE7     	.L1:            b       .L1
 111              	
 112              	                .align  2
 113 0038 04ED00E0 	.L2:            .word   SCB_ICSR
 114              	#if CORTEX_ALTERNATE_SWITCH
 115              	.L3:            .word   ICSR_PENDSVSET
 116              	#else
 117 003c 00000080 	.L3:            .word   ICSR_NMIPENDSET
ARM GAS  /tmp/ccJke32V.s 			page 7


DEFINED SYMBOLS
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:42     *ABS*:00000000 CONTEXT_OFFSET
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:43     *ABS*:e000ed04 SCB_ICSR
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:44     *ABS*:10000000 ICSR_PENDSVSET
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:45     *ABS*:80000000 ICSR_NMIPENDSET
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:58     .text:00000000 _port_switch
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:59     .text:00000000 $t
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:86     .text:00000020 _port_thread_start
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:100    .text:0000002c _port_switch_from_isr
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:103    .text:00000030 _port_exit_from_isr
./os/nil/ports/ARMCMx/compilers/GCC/nilcoreasm_v6m.s:113    .text:00000038 $d

UNDEFINED SYMBOLS
chSysHalt
chSchRescheduleS
